                 RELAX NG/Schematron Schema for GEDCOM 5.5 XML

  Chad Albers

     ----------------------------------------------------------------------

   Table of Contents

   1. [1]Background

                1.1. [2]Why RELAX NG/Schematron rather than DTD or W3C XML
                Schema?

                1.2. [3]Limitations of gedcom55XML.rng in relation to the
                GEDCOM 5.5 standard

                1.3. [4]GEDCOM 5.5 XML Schema License

   2. [5]Usage

                2.1. [6]Convert the GEDCOM 5.5 file to GEDCOM 5.5 XML

                2.2. [7]Validate the GEDCOM 5.5 XML document using
                gedcom55XML.rng

                             2.2.1. [8]Method 1

                             2.2.2. [9]Method 2

   3. [10]Documentation License

1. Background

   The Church of the Latter Days Saints' [11]GEDCOM 5.5 Standard provides a
   way to structure genealogical data to digitally store and transfer it in
   flat text files. As such, it is similar to documents formatted using the
   [12]Extensible Markup Language (XML). Currently, there are several ways to
   represent GEDCOM document as an XML document.

     * The Church of the the Latter Day Saints has proposed the [13]GEDCOM
       6.0 Standard. This standard represents a complete rewrite of the
       GEDCOM 5.5 in XML. Instead of GEDCOM 5.5 tags, GEDCOM 6.0 uses XML
       elements to structure the genealogical data. Some of these elements
       are similar to GEDCOM 5.5 tags, but the differences between the
       standards are so numerous as to prevent a one-to-one translation
       between them. A DTD of this standard is published in their pdf
       documentation. An unofficial DTD has also been [14]released.

     * Michael H. Kay has proposed a standard called [15]GedML. A DTD for
       this standard has been [16]released. Like GEDCOM 6.0, GedML uses XML
       elements to structure the genealogical data, instead of GEDCOM 5.5
       tags. The differences, though between GedML and GEDCOM 5.5 are ones of
       translations. For instance, first level GEDCOM 5.5 SOUR tags are
       translated as <Source> elements. However, other GEDCOM 5.5 tags are
       not translated: a INDI tag is simply an <INDI>. Why Kay translated
       some elements and left other untranslated is unknown. Another
       difference between GedML and GEDCOM 5.5 is the absent TRLR tag which
       indicates the end of the GEDCOM 5.5 data (this element is superfluous
       in XML since the closed root element indicates the end of the
       document). Because of these difference (inherent in the use of DTDs),
       GedML is not a one-to-one translation of GEDCOM 5.5, like the GEDCOM
       6.0 standard.

   I propose a much easier, third alternative to the other XML proposals:
   GEDCOM 5.5 XML. Quite simply, it represents a one-to-one translation of
   GEDCOM 5.5 into XML. All GEDCOM 5.5 tags correspond to XML elements with
   the same name. Rather than writing a DTD for XML proposal, I have instead
   chosen to define this proposal using [17]RELAX NG/[18]Schematron schema.
   The file name for the schema is called "gedcom55XML.rng."

     ----------------------------------------------------------------------

  1.1. Why RELAX NG/Schematron rather than DTD or W3C XML Schema?

   RELAX NG/Schematron schemas has several advantages over DTDs or W3C XML
   Schemas:

     * DTDs are less precise than RELAX NG and WC3 XML Schema, and the GEDCOM
       5.5 standard requires more precision. For instance, Kay's DTD checks
       the structure of a GedML XML file, but it does not check if the
       content is correctly formatted. DTDs have very limited ways to
       describe valid content, while RELAX NG, Schematron, and WC3 XML Schema
       can describe valid content.

     * RELAX NG is easier to learn and a more elegant solution to schemas
       than the overly complicated, committee-designed W3C XML Schema.

     * RELAX NG can handle the mixed content elements in the GEDCOM 5.5
       standard. This was accomplished by embedding Schematron patterns into
       the RELAX NG schema.

     ----------------------------------------------------------------------

  1.2. Limitations of gedcom55XML.rng in relation to the GEDCOM 5.5 standard

   Ideally, this schema would capture, in XML form, 100 percent of the GEDCOM
   5.5 standard. It, unfortunately, does not. It does, however, capture it
   better than a DTD would. Most of its limitations are due to difficulties
   in describing mixed-content structures.

     * gedcom55XML.rng is unable to specify if a GEDCOM 5.5 data DATE_VALUE
       has valid content. The possible combinations of DATE_VALUEs are simply
       too numerous to handle using RELAX NG or Schematron alone.
       gedcom55XML.rng can only be used to check if the DATE_VALUE data is
       between 1 and 35 characters.

     * gedcom55XML.rng can only specify EXACT_DATE GEDCOM 5.5 data within
       certain limits. It cannot check the EXACT_DATE values of
       TRANSMISSION_DATE and CHANGE_DATE. When it's able to specify the
       EXACT_DATE value, it only check the English MONTH abbreviations,
       (i.e., JAN, FEB, MAR, etc.).

     * Normally, the regions in the PLAC tag are separated by commas (i.e.,
       Kansas City, Jackson County, Missouri, USA) or, alternatively, the
       delimiter specified in the HEAD.PLAC.FORM tag. gedcom55XML.rng does
       not specify if the PLAC data is delimited.

     * The names of individuals in the NAME tag are usually formatted with
       backslashes to indicate first and last names (i.e., Joseph/Smith/).
       gedcom55XML.rng, regrettably, cannot describe the syntax of NAME data.

     * GEDCOM 5.5 allows for user-defined tags, even though it discourages
       there usage. gedcom55XML.rng cannot anticipate user-defined tags.

     * gedcom55XML.rng does not describe the content of SOURCE_CITATIONs EVEN
       tag's EVENT_TYPE_CITED_FROM, even though the GEDCOM 5.5 standard
       specifies a restricted set of values.

     * It also does not describe the content of SOURCE_RECORDs EVEN tag's
       EVENTS_RECORDED, even though the GEDCOM 5.5 standard also specifies a
       restricted set of values.

     * The AGE tag permits values such as CHILD, INFANT, STILLBORN, along
       with 'y','m','d' which respectively signify year, month, and day.
       Following the specification strictly, these value should be
       case-insensitive. However, in gedcom55XML.rng they currently are
       case-sensitive, defaulting to the lowercase values.

     * The MONTH values of DATE_EXACT should also be case-insensitive, but in
       gedcom55XML.rng's current implementation they are not. The defaults
       are the upper case values.

     ----------------------------------------------------------------------

  1.3. GEDCOM 5.5 XML Schema License

   gedcom55XML.rng is released under the [19]GNU General Public License
   Version 2 (GPL). The full text of this license can be found in file called
   "gpl-2.0" included with gedcom55XML.rng

     ----------------------------------------------------------------------

2. Usage

   XML Schemas can be used for two purposes: providing guidance about how to
   write a valid XML document and testing if a XML document is valid. The
   documentation below will demonstrate how to use the RELAX NG/Schematron
   GEDCOM 5.5 XML schema, gedcom55XML.rng, to determine the validity (in the
   XML sense) of of preexisting GEDCOM 5.5 documents. (It cannot be used to
   validate a GEDCOM 6.0 or a GedML XML document.)

   Validating a GEDCOM 5.5 XML document with gedcom55XML.rng is currently a
   complicated process. It requires familiarity with Java, a bit of
   programming skills, and some comfort with a command line user interface.
   If I have the time (and/or the desire), I plan to write a Java application
   that should simplify the process. I've released gedcom55XML.rng because
   perhaps someone else will do this.

   The instructions below follow several conventions:

     * family.ged represents a GEDCOM 5.5 file

     * family.xml stands for the GEDCOM 5.5 XML version of family.ged

     * Text sandwiched between < > indicates variables that will depend upon
       your run time environment

   In rough outline, the process has two steps:

    1. Convert the GEDCOM 5.5 file to a GEDCOM 5.5 XML document

    2. Validate the GEDCOM 5.5 XML document using gedcom55XML.rng

     ----------------------------------------------------------------------

  2.1. Convert the GEDCOM 5.5 file to GEDCOM 5.5 XML

   Currently there is no quick and easy way to convert a GEDCOM 5.5 (or a
   .ged) file into an GEDCOM 5.5 XML (or .xml) file. I know of only one way
   to accomplish it now (there may be another) and it requires some
   programming skills. To perform the conversion, we will use Java source
   code release by Michael Kay used in conjunction with his saxon parser.

    1. Download Kay's [20]source code.

    2. Compile it using your favorite Java distribution Java compiler -
       javac.

    3. Download Kay's [21]saxon parser and install it somewhere on your
       computer's hard drive. I have successfully used Saxon version 6.5.4.

    4. Issue the following command on your command line terminal:

       java -cp <path-to-saxon>:<path-to-gedml-classes>
       com.icl.saxon.StyleSheet -x GedcomParser family.ged
       <path-to-gedml-classes>/GEDCOMtoXML.xsl > family.xml

     ----------------------------------------------------------------------

  2.2. Validate the GEDCOM 5.5 XML document using gedcom55XML.rng

   Validating the XML file with RELAX NG and Schematron is another
   complicated affair. The complication arises because for gedcom55XML.rng to
   fully validate your GEDCOM 5.5 XML file, it must be used by a RELAX NG
   validator and a Schematron validator. (The entire process is described
   here, if you are curious about the gory details). There are a few easy
   solutions and a few complicated solutions.

     ----------------------------------------------------------------------

    2.2.1. Method 1

   One way of validating a GEDCOM 5.5 XML file with gedcom55XML.rng, can be
   downloaded here. This Java command line program performs both validations.
   I have used this program and it works well. The source code is available
   in the zip file. (Please note that the error messages are not very robust.
   The program tells you were the errors have occurred by indicating a line
   number, but the rest of the error message is rather cryptic.)

     ----------------------------------------------------------------------

    2.2.2. Method 2

   The last method is the most difficult. Performing both the RELAX NG and
   the Schematron validations individually.

    1. Validate the GEDCOM 5.5 XML file using the RELAX NG schemas.

       The gold standard for RELAX NG validation is a open source Java
       program called [22]jing, written by the author of the RELAX NG
       standard. This command line Java application can be downloaded here.

       To perform the RELAX NG validation, type the following command in a
       terminal

       java -jar <path-to-jing>/jing.jar gedcom55XML.rng family.xml

       The result will pipe to the terminal's standard output. jing will
       report all the errors it encounters. It won't say exactly what is
       wrong, but it will report what lines have errors in them. If jing
       reports no errors, your GEDCOM 5.5 XML file is valid, both in terms of
       its structure and mo of its content.

    2. Perform the Schematron validation

       The first validation only tests the validity of some of the content.
       RELAX NG, by itself, cannot test the mixed-content inherent in the
       GEDCOM 5.5 (and GEDCOM 5.5 XML) object model. The Schematron patterns
       will test the remainder.

       Testing the GEDCOM 5.5 XML file with gedcom55XML.rng's Schematron
       patterns, normally requires three transformations. Since the
       Schematron patterns are embedded inside gedcom55XML.rng, they would
       need to be extracted. These extracted Schematron patters need to be
       additionally transformedusing the RNG2Schtrn.xsl stylesheet available
       [23]file. To use the extracted Schematron patterns, you would need to
       transform them using another stylesheet available [24]here. This
       transformation would yield a file used to transform your family.xml
       file and finally validate it. (The entire process is described
       [25]here, if you are curious about the gory details)

       For convenience, included with gedcom55XML.rng are both the extracted
       Schematron patterns - gedcom55XML.sch - and the validation stylesheet
       - validate-gedcom55XML-with-schematron.xsl. To finally validate all
       the remaining content of your family-gedml.xml file, you will have to
       apply validate-gedcom55XML-with-schematron.xsl using saxon. To do so,
       issue the following command in a terminal:

       <path-to-saxon>/saxon family.xml
       validate-gedcom55XML-with-schematron.xsl

       Saxon will issue error messages if it finds any problems.

   My preferred method of validation is a combination of B and C. I first
   follow the C.i instructions and validate the GEDCOM 5.5 XML file using
   jing. This validates the file using only the RELAX NG schema. (jing,
   supposedly, can also perform the Schematron validation, but I haven't
   manage to get it to work). I next follow the instructions in B to validate
   the GEDCOM 5.5 XML file using the Schematron patterns, rather than
   following the method of C.ii. The error messages produced using B's method
   are more verbose than C.ii's. Method B will also perform the RELAX NG
   validation, but after it encounters only one error, it stops checking for
   other errors. I prefer the C.i. instructions because it will reveal all
   the RELAX NG validation errors.

  Copyrights

   Michael K. Hay retains the copyright to the GedML conversion code. He
   offers it free of charge, but since he has not licensed under an Open
   Source license it is not free as in freedom. Instead, he releases it with
   the following notice:

   There are no restrictions on its use, but equally, it is provided with no
   warranty or support.

     ----------------------------------------------------------------------

3. Documentation License

   This document is released under the [26]GNU Free Documentation License
   Version 1.2. The full text of this license is found in the file called
   "fdl.txt" released with gedcom55XML.rng

Links:
1. file:///home/calbers/works/src/git-managed/gedcom55xml/README.html#AEN8
2. file:///home/calbers/works/src/git-managed/gedcom55xml/README.html#AEN26
3. file:///home/calbers/works/src/git-managed/gedcom55xml/README.html#AEN36
4. file:///home/calbers/works/src/git-managed/gedcom55xml/README.html#AEN68
5. file:///home/calbers/works/src/git-managed/gedcom55xml/README.html#AEN74
6. file:///home/calbers/works/src/git-managed/gedcom55xml/README.html#AEN98
7. file:///home/calbers/works/src/git-managed/gedcom55xml/README.html#AEN114
8. file:///home/calbers/works/src/git-managed/gedcom55xml/README.html#AEN119
9. file:///home/calbers/works/src/git-managed/gedcom55xml/README.html#AEN123
10. file:///home/calbers/works/src/git-managed/gedcom55xml/README.html#AEN157
11. http://homepages.rootsweb.com/~pmcbride/gedcom/55gctoc.htm
12. http://www.w3.org/XML/
13. http://www.familysearch.org/GEDCOM/GedXML60.pdf
14. http://members.cox.net/leebr/genealogy/GEDCOM60.dtd
15. http://homepage.ntlworld.com/michael.h.kay/gedml/
16. http://users.breathe.com/mhkay/gedml/dtd.html
17. http://www.oasis-open.org/committees/relax-ng/spec-20011203.html
18. http://www.schematron.com/
19. http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
20. http://homepage.ntlworld.com/michael.h.kay/gedml/
21. http://saxon.sourceforge.net/
22. file:///home/calbers/works/src/git-managed/gedcom55xml/jing
23. http://www.topologi.com/public/Schtrn_XSD/RNG2Schtrn.zip
24. file:///home/calbers/works/src/git-managed/gedcom55xml/here
25. http://www.xml.com/pub/a/2004/02/11/relaxtron.html?page=5
26. http://www.gnu.org/licenses/fdl.html
