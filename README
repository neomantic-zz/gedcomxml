
                     RELAX NG/Schematron Schema for GedML

   Used in conjunction with other programs, ged.rng can determine the
   validity (in the XML sense) of a GEDCOM 5.5 as if it were an XML file.
   The file ged.rng contains a RELAX NG schema of the [1]GEDCOM 5.5
   standard as it is envisioned by Michael H. Kay's [2]GedML proposal. It
   cannot be used to validate the GEDCOM 6.0 XML standard, the presumed
   next-generation GEDCOM standard proposed by the Church of the Latter
   Day Saints.

Why RELAX NG/Schematron rather than DTD or W3C XML Schema?

   Although Kay released a [3]DTD for GEDML which could be used in a
   similar way, I chose to implement the schema in [4]RELAX NG for
   several reasons.
    1. DTDs are less precise than RELAX NG and WC3 XML Schema, and the
       GEDCOM 5.5 standard (upon which GedML is based) requires more
       precision. For instance, Kay's DTD checks the structure of a GedML
       xml file, but it does not check if the content is correctly
       formatted. DTDs have very limited ways to describe valid content,
       while RELAX NG, Schematron, and WC3 XML Schema can describe valid
       content.
    2. RELAX NG is easier to learn and a more elegant solution to schemas
       than the overly complicated, committee designed W3C XML Schema.
    3. RELAX NG gave me a way to handle the mixed content possibilities
       inherent in the GedML tree. This was accomplished by embedding
       [5]Schematron patterns into the RELAX NG schema.

How to Use ged.rng

   Validating a GedML document with ged.rng is currently a complicated
   process. It requires familiarity with Java, a bit of programming
   skills, and some comfortability with a command line user interface. If
   I have the time (and/or the desire), I plan to write a Java
   application that should simplify the process. I've released ged.rng
   because perhaps someone else will do this.

   The instructions below follow several conventions:
     * family.ged represents a GEDCOM 5.5 file
     * family.xml stands for the GedML version of family.ged
     * Text sandwiched between < > indicates variables that will depend
       upon your runtime environment

    1. Convert the GEDCOM 5.5 file to GedML
       Currently there is no quick and easy way to convert a GEDCOM 5.5
       (or a .ged) file into an GedML (or .xml) file. I know of only one
       way to accomplish it now (there may be another) and it requires
       some programming skills.

    1. Kay has released[6]1 Java source code which, when used in
       conjunction with his saxon parser, can perform this conversion.
         1. Download Kay's [7]source code
         2. Compile it using your favorite Java distribution Java
            compiler - javac - (Sun's, IBM's, Blackdown's, or Classpath's
            - I have used both Sun's and IBM's on GNU/Linux x86/PowerPC).
         3. Download Kay's [8]saxon parser and install it somewhere on
            your computer's hardrive. I have successfully used Saxon
            version 6.5.4.
         4. Issue the following command on your command line terminal:
            java -cp <path-to-saxon>:<path-to-gedml-classes>
            com.icl.saxon.StyleSheet -x GedcomParser family.ged
            <path-to-gedml-classes>/GEDCOMtoXML.xsl > family.xml
    2. For the courageous, there may be another way to convert a GEDCOM
       5.5 file to a GedML file. Danny Ayers has [9]released[10]2 Java
       source code called SAG (Simple API for GEDCOM). Although I have
       not tested it, the compiled source code is a library of functions
       which would facilitate the conversion; the source code itself does
       not produce a suitable binary to perform the conversion. More Java
       coding skills would be needed.

     Validate the GedML file

   Validating the xml file with RELAX NG and Schematron is another
   complicated affair. The complication arises because for ged.rng to
   fully validate your GedML file, it must be used by a RELAX NG
   validator and a Schematron validator. (The entire process is described
   [11]here, if you are curious about the gory details). There are a few
   easy solutions and a few complicated solutions.
    1. Topologi.com makes available a cost-free trial version of a
       graphical program that can perform both the RELAX NG and
       Schematron validations. You can download it from [12]here.[13]3
    2. Another way of validating a GedML file with ged.rng, can be
       downloaded [14]here.[15]4 This Java command line program performs
       both validations. I have used this program and it works well. The
       source code is available in the zip file. (Please note that the
       error messages are not very robust. The program tells you were the
       errors have occured by indicating a line number but the rest of
       the error message is rather cryptic.)
    3. The last method is the most difficult. Performing both the RELAX
       NG and the Schematron validations individually.
         1. First validate the GedML file using the RELAX NG schemas
            The gold standard for RELAX NG validation is a open source
            Java program called jing,[16]5 written by the author of the
            RELAX NG standard. This command line Java application can be
            downloaded [17]here.
            To perform the RELAX NG validation, type the following
            command in a terminal:
            java -jar <path-to-jing>/jing.jar ged.rng family.xml
            The result with show in the terminal's standard output. jing
            will report all the errors it encounters. It won't say
            exactly what is wrong, but it will report what lines have
            errors in them. If jing reports no errors, your GedML file is
            valid, both in terms of its structure and some of its
            content.
         2. Second perform the Schematron validation
            The first validation only tests the validity of some of the
            content. RELAX NG, by itself, cannot test the mixed-content
            inherent in the GEDCOM 5.5 (and GedML) object model. The
            Schematron patterns will test the remainder.
            Testing the GedML file with ged.rng's schematron patterns,
            normally requires three transformations. Since the schematron
            patterns are embedded inside ged.rng, they would need to be
            extracted using the RNG2Schtrn.xsl stylesheet available
            [18]here. To use the extracted schematron patterns, you would
            need to transform them using another stylesheet available
            [19]here. This transformation would yield a file used to
            transform your family-gedml.xml file and finally validate it.
            Instead, for your convenience, I have included both the
            extracted schematron patterns - ged.sch - and the validation
            file - sch-validate-gedml.xsl - with ged.rng. To finally
            validate all the remaining content of your family-gedml.xml
            file, you will have to apply sch-validate-gedml.xsl using
            saxon. Issue the following command in a terminal:
            <path-to-saxon>/saxon family.xml sch-validate-gedml.xsl
            Saxon will issue error messages if it finds any problems.

   My preferred method of validation is a combination of B and C. I first
   follow the C.i instructions and validate the GedML file using jing.
   This validates the file using only the RELAX NG schema. (jing,
   supposedly, can also perform the Schematron validation, but I haven't
   manage to get it to work). I next follow the instructions in B to
   validate the GedML file using the Schematron patterns, rather than
   following the method of C.ii. The error messages produced using B's
   method are more verbose than C.ii's. Method B will also perform the
   RELAX NG validation, but after it encounters only one error, it stops
   checking for other errors. I prefer the C.i. instructions because it
   will reveal all the RELAX NG validation errors.

Limitations of ged.rng in relation to the GedML standard

     * Kay's GedML standard is not a complete XML replication of the
       GEDCOM 5.5 standard. In particular, the GEDCOM 5.5 standard
       requires the TRLR tag at the end of a GEDCOM 5.5 file. This tag
       indicates the end of the file. Kay's GedML standard does not
       include the TRLR because the closed </GED> tag indicates the end
       of the GedML file. ged.rng follows the GedML standard in this
       regard and doesn't check for the TRLR tag.
     * ged.rng is unable to determine if GEDCOM 5.5's [20]DATE_VALUE has
       valid content. The possible combinations of DATE_VALUEs are simply
       too numerous to handle using RELAX NG or Schematron alone.
       Currently, all ged.rng can check is if the DATE_VALUE data is
       between 1 and 35 characters.
     * ged.rng has limited support for checking the [21]EXACT_DATE GEDCOM
       5.5 data. To be specific, it cannot check the EXACT_DATE values of
       [22]TRANSMISSION_DATE and [23]CHANGE_DATE. When it's able to check
       the the EXACT_DATE value, it only check the English [24]MONTH
       abbreviations, (i.e, JAN, FEB, MAR, etc...).
     * Normally, the regions in the PLAC tag are separated by commas
       (i.e, Kansas City, Jackson County, Missouri, USA) or,
       alternatively, the delimiter specified in the HEAD.PLAC.FORM tag.
       ged.rng does not check if the PLAC data is delimited.
     * The names of individuals in the NAME tag are usually formatted
       with backslashes to indicate first and last names (i.e.,
       Joseph/Smith/). ged.rng, regrettably, cannot check the syntax of
       NAME data.
     * Since there is no way to anticipate user-defined tags, ged.rng
       causes the validators to emit errors when they are encountered.
       Strictly speaking, while GEDCOM 5.5 discourages user-defined tags,
       they are perfectly legal.
     * Currently, ged.rng does not error check the content of
       SOURCE_CITATIONs EVEN tag's [25]EVENT_TYPE_CITED_FROM. It also
       does not error check the content of SOURCE_RECORDs EVEN tag's
       [26]EVENTS_RECORDED. In both cases, the GEDCOM 5.5 standard
       specified a restricted set of values.
     * The [27]AGE tag permits values such as CHILD, INFANT, STILLBORN,
       along with 'y','m','d' which respectively signifing year, month,
       day. Following the specification strictly, these value should be
       case-insensitive. However, in ged.rng they currently are
       case-sensitive, defaulting to the lowercase values
     * Similarly, the [28]MONTH values of DATE_EXACT should also be
       case-insensitive, but in ged.rng's currently implementation they
       are not. The default are the uppercases values.

   Most of the limitations are due to the fact that the data occurs in
   mixed-content structures. ged.rng currently relies on Schematron to
   check the GedML files mixed content. Unfortunately, though,
   Schematron, as far as I know, does not currently support regex pattern
   checking, which could easily remove these limitations. When Schematron
   and the rest of the world make the transition to the XPATH/XSLT 2.0
   standard, these limitations could easily be fixed.

License

   I'm releasing the ged.rng, ged.sch, and sch-validate-gedml.xsl under
   the [29]GNU General Public License Version 2 (GPL). The full text of
   this license can be found in file called "COPYING" included with
   ged.rng

   I'm releasing also this README Document under the [30]GNU Free
   Documentation License Version 1.2. The full text of this license is
   found in the file called "fdl.txt" released with ged.rng

Copyrights

   Copyright issues have become increasingly important in the software
   industry. Releasing ged.rng under the GPL and this documentation under
   the FDL means that I retain the copyrights but permits modifications
   so long as these follow the above licenses. In practice this means
   that the source code will be freely available, not only in terms of
   costs, but in terms of freedom. In its present form, it will always
   been available for public usage, review, and modification.
   To find out more, read [31]here.

   If copyright considerations are important to you, I have included the
   following copyright audit of the tools used to validate a GEDCOM 5.5
   file.
    1. Michael K. Hay retains the copyright to the GedML conversion code.
       He offers it free of charge but since he has not licensed under an
       Open Source license it is not free as in freedom. Instead, he
       releases it with the following notice:
       There are no restrictions on its use, but equally, it is provided
       with no warranty or support.
    2. Danny Ayers has released his source code into the public domain.
    3. Topologi.com program is a closed source proprietary program.
    4. This tool is provided by Topologi.com free of charge. The source
       code for this tool has been released, but its Open Source status
       is uncertain. The code says that Eddie Robertsson retains the
       copyrights and that he releases it as follows:
       * You may use and modify this package for any purpose.
       Redistribution is permitted, in both source and binary form,
       provided that this notice remains intact in all source
       distributions of this package.
       On face value, it is freer that Michael K. Hays "license" which
       says nothing about modification, but only usage.
    5. jing is an Open Source application licensed under the GPL.

References

   1. http://homepages.rootsweb.com/~pmcbride/gedcom/55gctoc.htm
   2. http://homepage.ntlworld.com/michael.h.kay/gedml/
   3. http://users.breathe.com/mhkay/gedml/dtd.html
   4. http://www.oasis-open.org/committees/relax-ng/spec-20011203.html
   5. http://www.schematron.com/
   6. file://localhost/home/calbers/works/src/gedrng/gedschema/README.html#1
   7. http://homepage.ntlworld.com/michael.h.kay/gedml/
   8. http://saxon.sourceforge.net/
   9. http://dannyayers.com/2002/02/sag/
  10. file://localhost/home/calbers/works/src/gedrng/gedschema/README.html#1
  11. http://www.xml.com/pub/a/2004/02/11/relaxtron.html?page=5
  12. http://www.topologi.com/products/validator/index.html
  13. file://localhost/home/calbers/works/src/gedrng/gedschema/README.html#3
  14. http://www.topologi.com/public/Schematron.zip
  15. file://localhost/home/calbers/works/src/gedrng/gedschema/README.html#4
  16. file://localhost/home/calbers/works/src/gedrng/gedschema/README.html#5
  17. http://www.thaiopensource.com/relaxng/jing.html
  18. http://www.topologi.com/public/Schtrn_XSD/RNG2Schtrn.zip
  19. http://www.ascc.net/xml/schematron/1.5/basic1-5/schematron-basic.xsl
  20. http://homepages.rootsweb.com/~pmcbride/gedcom/55gcch2.htm#DATE_VALUE
  21. http://homepages.rootsweb.com/~pmcbride/gedcom/55gcch2.htm#DATE_EXACT
  22. http://homepages.rootsweb.com/~pmcbride/gedcom/55gcch2.htm#TRANSMISSION_DATE
  23. http://homepages.rootsweb.com/~pmcbride/gedcom/55gcch2.htm#CHANGE_DATE_STRUCTURE
  24. http://homepages.rootsweb.com/~pmcbride/gedcom/55gcch2.htm#MONTH
  25. http://homepages.rootsweb.com/~pmcbride/gedcom/55gcch2.htm#EVENT_TYPE_CITED_FROM
  26. http://homepages.rootsweb.com/~pmcbride/gedcom/55gcch2.htm#EVENTS_RECORDED
  27. http://homepages.rootsweb.com/~pmcbride/gedcom/55gcch2.htm#AGE_AT_EVENT
  28. http://homepages.rootsweb.com/~pmcbride/gedcom/55gcch2.htm#MONTH
  29. http://www.gnu.org/copyleft/gpl.html
  30. http://www.gnu.org/licenses/licenses.html#FDL
  31. http://www.gnu.org/licenses/licenses.html#WhatIsCopyleft
