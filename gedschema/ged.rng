<?xml version="1.0" encoding="utf-8"?>
<grammar datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"
xmlns="http://relaxng.org/ns/structure/1.0"
xmlns:sch="http://www.ascc.net/xml/schematron">
<!-- $Id$ -->
  <!-- TODO - Implement further relaxng/schematron date parsing -->
<!-- REMINDER - When cleaning with tidy, be sure to fix pattern param which may
     have space added to them -->
<!-- 
 ******************************************************************************
 ******************************************************************************
    Copyright Â© 2005 Chad Albers
     
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
    
 ******************************************************************************
 ******************************************************************************
 -->
  <start>
    <element name="GED">
      <interleave>
        <ref name="header"/>
        <!--SUBM-->
        <zeroOrMore>
          <ref name="submission_record"/>
        </zeroOrMore>
        <!--Records-->
        <oneOrMore>
          <ref name="record"/>
        </oneOrMore>
      </interleave>
      <!-- Even though the gedml converter eliminates the TRLR tag, I have 
      		  decided to keep this as a relaxng requirement because I have 
      		  tried to reproduce the standard as accurately as possible in 
      		  relaxng syntax -->
      <element name="TRLR">
        <empty/>
      </element>
    </element>
  </start>
  <!--Record Structures of the Lineage-Linked Form-->
  <!--HEADER-->
  <define name="header">
    <element name="HEAD">
      <interleave>
        <element name="SOUR">
          <!-- SOUR Schematron rule -->
          <sch:pattern name="Checking length of Header Record SOUR">
            <sch:rule context="HEAD/SOUR/node()[self::text()]">
              <sch:assert test="string-length( normalize-space(.) ) &lt; 21">
              Exceeds maximum SOUR length of 20</sch:assert>
            </sch:rule>
          </sch:pattern>
          <interleave>
            <text/>
            <!--VERS-->
            <optional>
              <element name="VERS">
                <data type="string">
                  <param name="minLength">1</param>
                  <param name="maxLength">15</param>
                </data>
              </element>
            </optional>
            <!--NAME-->
            <optional>
              <element name="NAME">
                <data type="string">
                  <param name="minLength">1</param>
                  <param name="maxLength">90</param>
                </data>
              </element>
            </optional>
            <!--CORP-->
            <optional>
              <element name="CORP">
                <!-- CORP Schematron rule -->
                <sch:pattern name="Checking length of Header Record CORP">
                  <sch:rule context="CORP/node()[self::text()]">
                    <sch:assert test="string-length( normalize-space(.) ) &lt; 91">
                    Exceeds maximum CORP length of 90</sch:assert>
                  </sch:rule>
                </sch:pattern>
                <interleave>
                  <text/>
                  <!--ADDR -->
                  <optional>
                    <ref name="address_structure"/>
                  </optional>
                  <optional>
                  	<ref name="phone"/>
                  </optional>
                </interleave>
              </element>
            </optional>
            <!--DATA-->
            <optional>
              <element name="DATA">
                <!-- DATA Schematron rule -->
                <sch:pattern name="Checking length of Header Record DATA">
                  <sch:rule context="DATA/node()[self::text()]">
                    <sch:assert test="string-length( normalize-space(.) ) &lt; 91">
                    Exceeds maximum DATA length of 90</sch:assert>
                  </sch:rule>
                </sch:pattern>
                <interleave>
                  <text/>
                  <!--DATE-->
                  <!-- I've implement an English Language Exact Date check which means
                      it includes English words for the Month.  Gedcom specs also includes
                      French and Hebrew (why not others?) but even these do not fit within
                      the prescribe 10-11 date data length.  Additionally, this implementation
                      does not check to determine if the date number is actually one possible
                      for the indicated month.  Perhaps schematron can help here, but it
                      would be really messy and time consuming.  -->
                  <optional>
                    <element name="DATE">
                      <data type="token">
                      	<param name="pattern">[1-3]?\d (JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC) \d{4}</param>              
                      </data>
                    </element>
                  </optional>
                  <!--COPR-->
                  <optional>
                    <element name="COPR">
                      <data type="string">
                        <param name="minLength">1</param>
                        <param name="maxLength">90</param>
                      </data>
                    </element>
                  </optional>
                </interleave>
              </element>
            </optional>
          </interleave>
        </element>
        <!--DEST-->
        <optional>
          <element name="DEST">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">20</param>
            </data>
          </element>
        </optional>
        <!--DATE-->
        <optional>
          <element name="DATE">
            <!-- DATE Schematron rule -->
            <!-- FIX?  Can I make schematron check date format -->
            <sch:pattern name="Checking length of Header Record DATE">
              <sch:rule context="GED/HEAD/DATE/node()[self::text()]">
                <sch:assert test="string-length( normalize-space(.) ) &lt; 12">
                DATE range exceeds maximum of 11</sch:assert>
                <sch:assert test="string-length( normalize-space(.) ) &gt; 9">
                DATE range fails to meet the minimum of 10</sch:assert>
              </sch:rule>
            </sch:pattern>
            <mixed>
              <optional>
                <element name="TIME">
                  <data type="token">
                    <param name="pattern">([1-2]?\d)?:?([0-5]\d)?:?([0-5]\d)?:?(\d\d)?</param>
                    <param name="minLength">1</param>
                    <param name="maxLength">12</param>
                  </data>
                </element>
              </optional>
            </mixed>
          </element>
        </optional>
        <element name="SUBM">
          <attribute name="REFN">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">22</param>
            </data>
          </attribute>
          <empty/>
        </element>
        <!--SUBN-->
        <optional>
          <element name="SUBN">
            <attribute name="REFN">
              <data type="string">
                <param name="minLength">1</param>
                <param name="maxLength">22</param>
              </data>
            </attribute>
            <empty/>
          </element>
        </optional>
        <!--FILE-->
        <optional>
          <element name="FILE">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">90</param>
            </data>
          </element>
        </optional>
        <!--COPR-->
        <optional>
          <element name="COPR">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">90</param>
            </data>
          </element>
        </optional>
        <element name="GEDC">
          <element name="VERS">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">15</param>
            </data>
          </element>
          <!--TODO - Add default value of LINEAGE-LINKED-->
          <element name="FORM">
            <data type="string">
              <param name="minLength">14</param>
              <param name="maxLength">20</param>
            </data>
          </element>
        </element>
        <element name="CHAR">
          <!-- CHAR Schematron rule -->
          <sch:pattern name="Checking length of Header Record CHAR">
            <sch:rule context="CHAR/node()[self::text()]">
              <sch:assert test="contains(., 'ANSEL') or contains(., 'UNICODE') or contains (., 'ASCII')">
              CHAR of Gedcom file fails to be ANSEL, UNICODE, or
              ASCII</sch:assert>
            </sch:rule>
          </sch:pattern>
          <mixed>
            <optional>
              <element name="VERS">
                <data type="string">
                  <param name="minLength">1</param>
                  <param name="maxLength">15</param>
                </data>
              </element>
            </optional>
          </mixed>
        </element>
        <!--LANG-->
        <optional>
          <element name="LANG">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">15</param>
              <param name="pattern">
              Afrikaans|Albanian|Anglo-Saxon|Catalan|Catalan_Spn|Czech|Danish|Dutch|English|Esperanto|Estonian|Faroese|Finnish|French|German|Hawaiian|Hungarian|Icelandic|Indonesian|Italian|Latvian|Lithuanian|Navaho|Norwegian|Polish|Portuguese|Romanian|Serbo_Croa|Slovak|Slovene|Spanish|Swedish|Turkish|Wendic</param>
            </data>
          </element>
        </optional>
        <!--PLAC-->
        <optional>
          <element name="PLAC">
            <optional>
              <element name="FORM">
                <data type="string">
                  <param name="minLength">1</param>
                  <param name="maxLength">120</param>
                </data>
              </element>
            </optional>
          </element>
        </optional>
        <!--NOTE-->
        <optional>
          <element name="NOTE">
            <!-- NOTE Schematron rule -->
            <sch:pattern name="Checking length of Header Record NOTE">
              <sch:rule context="GED/HEAD/NOTE/node()[self::text()]">
                <sch:assert test="string-length( normalize-space(.) ) &lt; 248">
                Exceeds maximum NOTE length of 248</sch:assert>
              </sch:rule>
            </sch:pattern>
            <interleave>
              <text/>
              <zeroOrMore>
                <element name="CONC">
                  <data type="string">
                    <param name="minLength">1</param>
                    <param name="maxLength">248</param>
                  </data>
                </element>
              </zeroOrMore>
              <zeroOrMore>
                <element name="CONT">
                  <data type="string">
                    <param name="minLength">1</param>
                    <param name="maxLength">248</param>
                  </data>
                </element>
              </zeroOrMore>
            </interleave>
          </element>
        </optional>
      </interleave>
    </element>
  </define>
  <!--RECORD-->
  <define name="record">
    <choice>
      <ref name="individual_record"/>
      <ref name="family_record"/>
      <ref name="multimedia_record"/>
      <ref name="note_record"/>
      <ref name="repository_record"/>
      <ref name="source_record"/>
      <ref name="submitter_record"/>
    </choice>
  </define>
  <!--FAM_RECORD-->
  <define name="family_record">
    <element name="FAM">
      <attribute name="ID"/>
      <interleave>
        <!--Family Events-->
        <zeroOrMore>
          <ref name="family_event"/>
        </zeroOrMore>
        <!--HUSB XREFN:INDI-->
        <optional>
          <element name="WIFE">
            <attribute name="REFN">
              <data type="string">
                <param name="minLength">1</param>
                <param name="maxLength">22</param>
              </data>
            </attribute>
            <empty/>
          </element>
        </optional>
        <!--WIFE XREFN:INDI-->
        <optional>
          <element name="HUSB">
            <attribute name="REFN">
              <data type="string">
                <param name="minLength">1</param>
                <param name="maxLength">22</param>
              </data>
            </attribute>
            <empty/>
          </element>
        </optional>
        <!--CHIL XREFN:INDI-->
        <zeroOrMore>
          <element name="CHIL">
            <attribute name="REFN">
              <data type="string">
                <param name="minLength">1</param>
                <param name="maxLength">22</param>
              </data>
            </attribute>
            <empty/>
          </element>
        </zeroOrMore>
        <!--COUNT_OF_CHILDREN-->
        <optional>
          <element name="NCHI">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">3</param>
            </data>
          </element>
        </optional>
        <!--SUMB XREFN:INDI-->
        <zeroOrMore>
          <element name="SUBM">
            <attribute name="REFN">
              <data type="string">
                <param name="minLength">1</param>
                <param name="maxLength">22</param>
              </data>
            </attribute>
            <empty/>
          </element>
        </zeroOrMore>
        <!--SLGS-->
        <zeroOrMore>
          <element name="SLGS">
            <interleave>
              <!--STAT-->
              <optional>
                <element name="STAT">
                  <data type="string">
                    <param name="pattern">
                    CANCELED|CLEARED|COMPLETED|DNS|DNS/CAN|PRE-1970|QUALIFIED|SUBMITTED|UNCLEARED</param>
                    <param name="minLength">3</param>
                    <param name="maxLength">10</param>
                  </data>
                </element>
              </optional>
              <!--DATE-->
              <optional>
                <element name="DATE">
                  <!--TODO Implement DATE_VALUE-->
                  <data type="string">
                    <param name="minLength">4</param>
                    <param name="maxLength">35</param>
                  </data>
                </element>
              </optional>
              <!--TEMP-->
              <optional>
                <element name="TEMP">
                  <data type="string">
                    <param name="minLength">4</param>
                    <param name="maxLength">5</param>
                  </data>
                </element>
              </optional>
              <!--PLAC-->
              <optional>
                <element name="PLAC">
                  <!--TODO Implement PLACE_VALUE-->
                  <data type="string">
                    <param name="minLength">1</param>
                    <param name="maxLength">120</param>
                  </data>
                </element>
              </optional>
              <!--SOUR-->
              <zeroOrMore>
              	 <ref name="source_citation_obje"/>              
              </zeroOrMore>
              <!--NOTE-->
              <zeroOrMore>
                <ref name="note_structure"/>
              </zeroOrMore>
            </interleave>
          </element>
        </zeroOrMore>
        <!--SOUR-->
        <zeroOrMore>
          <ref name="source_citation"/>
        </zeroOrMore>
        <!--OBJE-->
        <zeroOrMore>
          <ref name="multimedia_link"/>
        </zeroOrMore>
        <!--NOTE-->
        <zeroOrMore>
          <ref name="note_structure"/>
        </zeroOrMore>
        <ref name="record_end"/>
      </interleave>
    </element>
  </define>
  <!--INDIVIDUAL_RECORD-->
  <define name="individual_record">
    <element name="INDI">
      <attribute name="ID">
        <data type="string">
          <param name="minLength">1</param>
          <param name="maxLength">22</param>
        </data>
      </attribute>
      <interleave>
        <!--RESN-->
        <optional>
          <element name="RESN">
            <data type="string">
              <param name="pattern">locked|privacy</param>
              <param name="minLength">6</param>
              <param name="maxLength">7</param>
            </data>
          </element>
        </optional>
        <!--PERSONAL_NAME_STRUCTURE-->
        <zeroOrMore>
          <element name="NAME">
            <!-- NAME Schematron rule -->
            <!-- TODO? - check if names separated by / -->
            <sch:pattern name="Checking length of Individual Record NAME">
              <sch:rule context="INDI/NAME/node()[self::text()]">
                <sch:assert test="string-length( normalize-space(.) ) &lt; 121">
                Exceeds maximum NAME length of 120</sch:assert>
              </sch:rule>
            </sch:pattern>
            <interleave>
              <text/>
              <!--NPFX-->
              <optional>
                <element name="NPFX">
                  <data type="string">
                    <param name="minLength">1</param>
                    <param name="maxLength">30</param>
                  </data>
                </element>
              </optional>
              <!--GIVN-->
              <optional>
                <element name="GIVN">
                  <data type="string">
                    <param name="minLength">1</param>
                    <param name="maxLength">120</param>
                  </data>
                </element>
              </optional>
              <!--NICK-->
              <optional>
                <element name="NICK">
                  <data type="string">
                    <param name="minLength">1</param>
                    <param name="maxLength">30</param>
                  </data>
                </element>
              </optional>
              <!--SPFX-->
              <optional>
                <element name="SPFX">
                  <data type="string">
                    <param name="minLength">1</param>
                    <param name="maxLength">30</param>
                  </data>
                </element>
              </optional>
              <!--SURN-->
              <optional>
                <element name="SURN">
                  <data type="string">
                    <param name="minLength">1</param>
                    <param name="maxLength">120</param>
                  </data>
                </element>
              </optional>
              <!--NSFX-->
              <optional>
                <element name="NSFX">
                  <data type="string">
                    <param name="minLength">1</param>
                    <param name="maxLength">30</param>
                  </data>
                </element>
              </optional>
              <!--SOUR-->
              <zeroOrMore>
              	 <ref name="source_citation_obje"/>               
              </zeroOrMore>
              <!--NOTE-->
              <zeroOrMore>
                <ref name="note_structure"/>
              </zeroOrMore>         
            </interleave>
          </element>
        </zeroOrMore>
        <!--SEX-->
        <optional>
          <element name="SEX">
            <data type="string">
              <param name="pattern">M|F|Male|Female</param>
              <param name="minLength">1</param>
              <param name="maxLength">7</param>
            </data>
          </element>
        </optional>
        <!--Events-->
        <zeroOrMore>
          <ref name="individual_event"/>
        </zeroOrMore>
        <!--Attributes-->
        <zeroOrMore>
          <ref name="individual_attribute"/>
        </zeroOrMore>
        <!--LDS Individual Ordinances-->
        <zeroOrMore>
          <ref name="lds_individual_ordinance"/>
        </zeroOrMore>
        <!--FAMC-->
        <zeroOrMore>
          <element name="FAMC">
            <attribute name="REFN">
              <data type="string">
                <param name="minLength">1</param>
                <param name="maxLength">22</param>
              </data>
            </attribute>
            <interleave>
              <!--PEDI-->
              <optional>
                <element name="PEDI">
                  <data type="string">
                    <param name="pattern">adopted|birth|foster|sealing</param>
                    <param name="minLength">5</param>
                    <param name="maxLength">7</param>
                  </data>
                </element>
              </optional>
              <!--NOTE-->
              <zeroOrMore>
                <ref name="note_structure"/>
              </zeroOrMore>
            </interleave>
          </element>
        </zeroOrMore>
        <!--FAMS-->
        <zeroOrMore>
          <element name="FAMS">
            <attribute name="REFN">
              <data type="string">
                <param name="minLength">1</param>
                <param name="maxLength">22</param>
              </data>
            </attribute>
            <zeroOrMore>
              <ref name="note_structure"/>
            </zeroOrMore>
          </element>
        </zeroOrMore>
        <!--SUBM-->
        <zeroOrMore>
          <element name="SUBM">
            <attribute name="REFN">
              <data type="string">
                <param name="minLength">1</param>
                <param name="maxLength">22</param>
              </data>
            </attribute>
            <empty/>
          </element>
        </zeroOrMore>
        <!--ASSOCIATION_STRUCTURE-->
        <zeroOrMore>
          <element name="ASSO">
            <attribute name="REFN">
              <data type="string">
                <param name="minLength">1</param>
                <param name="maxLength">22</param>
              </data>
            </attribute>
            <!--RELA-->
            <interleave>
              <element name="RELA">
                <data type="string">
                  <param name="minLength">1</param>
                  <param name="maxLength">25</param>
                </data>
              </element>
              <!--NOTE-->
              <zeroOrMore>
                <ref name="note_structure"/>
              </zeroOrMore>
              <!--SOUR-->
              <zeroOrMore>
                <ref name="source_citation"/>
              </zeroOrMore>
            </interleave>
          </element>
        </zeroOrMore>
        <!--ALIA-->
        <zeroOrMore>
          <element name="ALIA">
            <attribute name="REFN">
              <data type="string">
                <param name="minLength">1</param>
                <param name="maxLength">22</param>
              </data>
            </attribute>
            <empty/>
          </element>
        </zeroOrMore>
        <!--ANCI-->
        <zeroOrMore>
          <element name="ANCI">
            <attribute name="REFN">
              <data type="string">
                <param name="minLength">1</param>
                <param name="maxLength">22</param>
              </data>
            </attribute>
            <empty/>
          </element>
        </zeroOrMore>
        <!--DESI-->
        <zeroOrMore>
          <element name="DESI">
            <attribute name="REFN">
              <data type="string">
                <param name="minLength">1</param>
                <param name="maxLength">22</param>
              </data>
            </attribute>
            <empty/>
          </element>
        </zeroOrMore>
        <!--SOUR-->
        <zeroOrMore>
          <ref name="source_citation"/>
        </zeroOrMore>
        <!--OBJE-->
        <zeroOrMore>
          <ref name="multimedia_link"/>
        </zeroOrMore>
        <!--NOTE-->
        <zeroOrMore>
          <ref name="note_structure"/>
        </zeroOrMore>
        <ref name="record_end"/>
      </interleave>
    </element>
  </define>
  <!--MULTIMEDIA_RECORD-->
  <define name="multimedia_record">
    <element name="OBJE">
      <attribute name="ID">
        <data type="string">
          <param name="minLength">1</param>
          <param name="maxLength">22</param>
        </data>
      </attribute>
      <interleave>
        <!--FORM-->
        <element name="FORM">
          <data type="string">
            <param name="pattern">bmp|gif|jpeg|ole|pcx|tiff|wav</param>
            <param name="minLength">3</param>
            <param name="maxLength">4</param>
          </data>
        </element>
        <!--TITL-->
        <optional>
          <element name="TITL">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">248</param>
            </data>
          </element>
        </optional>
        <!--NOTE-->
        <zeroOrMore>
          <ref name="note_structure"/>
        </zeroOrMore>
        <!--SOUR-->
        <zeroOrMore>
          <ref name="source_citation"/>
        </zeroOrMore>
        <!--BLOB-->
        <element name="BLOB">
          <!--CONT-->
          <oneOrMore>
            <element name="CONT">
              <data type="string">
                <param name="minLength">1</param>
                <param name="maxLength">87</param>
              </data>
            </element>
          </oneOrMore>
        </element>
        <!--OBJE-->
        <element name="OBJE">
          <attribute name="REFN">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">22</param>
            </data>
          </attribute>
          <empty/>
        </element>
        <ref name="record_end"/>
      </interleave>
    </element>
  </define>
  <!--NOTE_RECORD-->
  <define name="note_record">
    <element name="NOTE">
      <attribute name="ID">
        <data type="string">
          <param name="minLength">1</param>
          <param name="maxLength">22</param>
        </data>
      </attribute>
      <!-- NOTE Schematron rule -->
      <sch:pattern name="Checking length of Note Record NOTE">
        <sch:rule context="NOTE/node()[self::text()]">
          <sch:assert test="string-length( normalize-space(.) ) &lt; 249">
          Exceeds maximum NOTE length of 248</sch:assert>
        </sch:rule>
      </sch:pattern>
      <interleave>
        <text/>
        <!--CONC-->
        <zeroOrMore>
          <element name="CONC">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">248</param>
            </data>
          </element>
        </zeroOrMore>
        <!--CONT-->
        <zeroOrMore>
          <element name="CONT">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">248</param>
            </data>
          </element>
        </zeroOrMore>
        <!--SOUR-->
        <zeroOrMore>
          <ref name="source_citation"/>
        </zeroOrMore>
        <ref name="record_end"/>
      </interleave>
    </element>
  </define>
  <!--REPOSITORY_RECORD-->
  <define name="repository_record">
    <element name="REPO">
      <attribute name="ID">
        <data type="string">
          <param name="minLength">1</param>
          <param name="maxLength">22</param>
        </data>
      </attribute>
      <interleave>
        <!--NAME-->
        <optional>
          <element name="NAME">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">90</param>
            </data>
          </element>
        </optional>
        <!--ADDR -->
        <optional>
          <ref name="address_structure"/>
        </optional>
        <optional>
          	<ref name="phone"/>
        </optional>
        <!--NOTE-->
        <zeroOrMore>
          <ref name="note_structure"/>
        </zeroOrMore>
        <ref name="record_end"/>
      </interleave>
    </element>
  </define>
  <!--SOURCE_RECORD-->
  <define name="source_record">
    <element name="SOUR">
      <attribute name="ID">
        <data type="string">
          <param name="minLength">1</param>
          <param name="maxLength">22</param>
        </data>
      </attribute>
      <interleave>
        <!--DATA-->
        <optional>
          <element name="DATA">
            <interleave>
              <!--EVEN-->
              <zeroOrMore>
                <element name="EVEN">
                  <!-- EVEN Schematron rule -->
                  <sch:pattern name="Checking length of Source Record EVEN">
                    <sch:rule context="SOUR/DATA/EVEN/node()[self::text()]">
                      <sch:assert test="string-length( normalize-space(.) ) &lt; 91">
                      EVEN exceeds maximum of 90</sch:assert>
                    </sch:rule>
                  </sch:pattern>
                  <interleave>
                    <text/>
                    <!--DATE as DATE_PERIOD -->
                    <optional>
                      <element name="DATE">
                        <data type="string">
                          <param name="minLength">7</param>
                          <param name="maxLength">35</param>
                        </data>
                      </element>
                    </optional>
                    <!--PLAC-->
                    <optional>
                      <element name="PLAC">
                        <data type="string">
                          <param name="minLength">1</param>
                          <param name="maxLength">120</param>
                        </data>
                      </element>
                    </optional>
                  </interleave>
                </element>
              </zeroOrMore>
              <!--AGNC-->
              <optional>
                <element name="AGNC">
                  <data type="string">
                    <param name="minLength">1</param>
                    <param name="maxLength">120</param>
                  </data>
                </element>
              </optional>
              <!--NOTE-->
              <zeroOrMore>
                <ref name="note_structure"/>
              </zeroOrMore>
            </interleave>
          </element>
        </optional>
        <!--AUTH-->
        <optional>
          <element name="AUTH">
            <!-- AUTH Schematron rule -->
            <sch:pattern name="Checking length of Header Record AUTH">
              <sch:rule context="AUTH/node()[self::text()]">
                <sch:assert test="string-length( normalize-space(.) ) &lt; 249">
                Exceeds maximum AUTH length of 248</sch:assert>
              </sch:rule>
            </sch:pattern>
            <interleave>
              <text/>
              <!--CONC-->
              <zeroOrMore>
                <element name="CONC">
                  <data type="string">
                    <param name="minLength">1</param>
                    <param name="maxLength">248</param>
                  </data>
                </element>
              </zeroOrMore>
              <!--CONT-->
              <zeroOrMore>
                <element name="CONT">
                  <data type="string">
                    <param name="minLength">1</param>
                    <param name="maxLength">248</param>
                  </data>
                </element>
              </zeroOrMore>
            </interleave>
          </element>
        </optional>
        <!--TITL-->
        <optional>
          <element name="TITL">
            <!-- TITL Schematron rule -->
            <sch:pattern name="Checking length of Source Record TITL">
              <sch:rule context="SOUR/TITL/node()[self::text()]">
                <sch:assert test="string-length( normalize-space(.) ) &lt; 249">
                Exceeds maximum TITL length of 248</sch:assert>
              </sch:rule>
            </sch:pattern>
            <interleave>
              <text/>
              <!--CONC-->
              <zeroOrMore>
                <element name="CONC">
                  <data type="string">
                    <param name="minLength">1</param>
                    <param name="maxLength">248</param>
                  </data>
                </element>
              </zeroOrMore>
              <!--CONT-->
              <zeroOrMore>
                <element name="CONT">
                  <data type="string">
                    <param name="minLength">1</param>
                    <param name="maxLength">248</param>
                  </data>
                </element>
              </zeroOrMore>
            </interleave>
          </element>
        </optional>
        <!--ABBR-->
        <optional>
          <element name="ABBR">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">60</param>
            </data>
          </element>
        </optional>
        <!--PUBL-->
        <optional>
          <element name="PUBL">
            <!-- PUBL Schematron rule -->
            <sch:pattern name="Checking length of Source Record PUBL">
              <sch:rule context="PUBL/node()[self::text()]">
                <sch:assert test="string-length( normalize-space(.) ) &lt; 249">
                Exceeds maximum PUBL length of 248</sch:assert>
              </sch:rule>
            </sch:pattern>
            <interleave>
              <text/>
              <!--CONC-->
              <zeroOrMore>
                <element name="CONC">
                  <data type="string">
                    <param name="minLength">1</param>
                    <param name="maxLength">248</param>
                  </data>
                </element>
              </zeroOrMore>
              <!--CONT-->
              <zeroOrMore>
                <element name="CONT">
                  <data type="string">
                    <param name="minLength">1</param>
                    <param name="maxLength">248</param>
                  </data>
                </element>
              </zeroOrMore>
            </interleave>
          </element>
        </optional>
        <!--TEXT-->
        <optional>
          <element name="TEXT">
            <!-- TEXT Schematron rule -->
            <sch:pattern name="Checking length of Source Record TEXT">
              <sch:rule context="SOUR/TEXT/node()[self::text()]">
                <sch:assert test="string-length( normalize-space(.) ) &lt; 249">
                Exceeds maximum TEXT length of 248</sch:assert>
              </sch:rule>
            </sch:pattern>
            <interleave>
              <text/>
              <!--CONC-->
              <zeroOrMore>
                <element name="CONC">
                  <data type="string">
                    <param name="minLength">1</param>
                    <param name="maxLength">248</param>
                  </data>
                </element>
              </zeroOrMore>
              <!--CONT-->
              <zeroOrMore>
                <element name="CONT">
                  <data type="string">
                    <param name="minLength">1</param>
                    <param name="maxLength">248</param>
                  </data>
                </element>
              </zeroOrMore>
            </interleave>
          </element>
        </optional>
        <!--REPO-->
        <optional>
          <element name="REPO">
            <attribute name="REFN">
              <data type="string">
                <param name="minLength">1</param>
                <param name="maxLength">22</param>
              </data>
            </attribute>
            <interleave>
              <!--NOTE-->
              <zeroOrMore>
                <ref name="note_structure"/>
              </zeroOrMore>
              <!--CALN-->
              <zeroOrMore>
                <element name="CALN">
                  <!-- DATE Schematron rule -->
                  <sch:pattern name="Checking length of Source Repository Citation CALN">
                    <sch:rule context="CALN/node()[self::text()]">
                      <sch:assert test="string-length( normalize-space(.) ) &lt; 121">
                      CALN range exceeds maximum of 120</sch:assert>
                    </sch:rule>
                  </sch:pattern>
                  <mixed>
                    <optional>
                      <element name="MEDI">
                        <data type="string">
                          <param name="pattern">
                          audio|book|card|electronic|fiche|film|magazine|manuscript|map|newspaper|photo|tombstone|video</param>
                          <param name="minLength">1</param>
                          <param name="maxLength">15</param>
                        </data>
                      </element>
                    </optional>
                  </mixed>
                </element>
              </zeroOrMore>
            </interleave>
          </element>
        </optional>
        <!--SOUR-->
        <zeroOrMore>
          <ref name="source_citation"/>
        </zeroOrMore>
        <!--OBJE-->
        <zeroOrMore>
          <ref name="multimedia_link"/>
        </zeroOrMore>
        <!--NOTE-->
        <zeroOrMore>
          <ref name="note_structure"/>
        </zeroOrMore>
        <ref name="record_end"/>
      </interleave>
    </element>
  </define>
  <!--SUBMITTER_RECORD-->
  <define name="submitter_record">
    <element name="SUBM">
      <attribute name="ID">
        <data type="string">
          <param name="minLength">1</param>
          <param name="maxLength">22</param>
        </data>
      </attribute>
      <interleave>
        <element name="NAME">
          <data type="string">
            <param name="minLength">1</param>
            <param name="maxLength">60</param>
          </data>
        </element>
        <!--ADDR  -->
        <optional>
          <ref name="address_structure"/>
        </optional>
        <optional>
           <ref name="phone"/>
        </optional>
        <!--OBJE-->
        <zeroOrMore>
          <ref name="multimedia_link"/>
        </zeroOrMore>
        <!--LANG-->
        <!--FIX - This should be constrained to 3 occurences -->
        <zeroOrMore>
          <element name="LANG">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">15</param>
              <param name="pattern">
              Afrikaans|Albanian|Anglo-Saxon|Catalan|Catalan_Spn|Czech|Danish|Dutch|English|Esperanto|Estonian|Faroese|Finnish|French|German|Hawaiian|Hungarian|Icelandic|Indonesian|Italian|Latvian|Lithuanian|Navaho|Norwegian|Polish|Portuguese|Romanian|Serbo_Croa|Slovak|Slovene|Spanish|Swedish|Turkish|Wendic</param>
            </data>
          </element>
        </zeroOrMore>
        <!--RFN-->
        <optional>
          <element name="RFN">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">30</param>
            </data>
          </element>
        </optional>
        <!--RIN-->
        <optional>
          <element name="RIN">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">12</param>
            </data>
          </element>
        </optional>
        <!--CHAN-->
        <optional>
          <ref name="change_date"/>
        </optional>
      </interleave>
    </element>
  </define>
  <!--SUBMISSION_RECORD-->
  <define name="submission_record">
    <element name="SUBN">
      <attribute name="ID">
        <data type="string">
          <param name="minLength">1</param>
          <param name="maxLength">22</param>
        </data>
      </attribute>
      <interleave>
        <!--SUBM-->
        <optional>
          <element name="SUBM">
            <attribute name="REFN">
              <data type="string">
                <param name="minLength">1</param>
                <param name="maxLength">22</param>
              </data>
            </attribute>
            <empty/>
          </element>
        </optional>
        <!--FAMF-->
        <optional>
          <element name="FAMF">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">120</param>
            </data>
          </element>
        </optional>
        <!--TEMP-->
        <optional>
          <element name="TEMP">
            <data type="string">
              <param name="minLength">4</param>
              <param name="maxLength">5</param>
            </data>
          </element>
        </optional>
        <!--ANCE-->
        <optional>
          <element name="ANCE">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">4</param>
            </data>
          </element>
        </optional>
        <!--DESC-->
        <optional>
          <element name="DESC">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">4</param>
            </data>
          </element>
        </optional>
        <!--ORDI-->
        <optional>
          <element name="ORDI">
            <data type="string">
              <param name="pattern">yes|no</param>
              <param name="minLength">2</param>
              <param name="maxLength">3</param>
            </data>
          </element>
        </optional>
        <!--RIN-->
        <optional>
          <element name="RIN">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">12</param>
            </data>
          </element>
        </optional>
      </interleave>
    </element>
  </define>
  <!--Substructures of the Lineage-Linked Form-->
  <!--ADDRESS_STRUCTURE-->
  <define name="address_structure">
    <element name="ADDR">
      <!-- ADDR Schematron rule -->
      <sch:pattern name="Checking length of Address Structure ADDR">
        <sch:rule context="ADDR/node()[self::text()]">
          <sch:assert test="string-length( normalize-space(.) ) &lt; 61">
          Exceeds maximum NOTE length of 60</sch:assert>
        </sch:rule>
      </sch:pattern>
      <interleave>
        <text/>
        <zeroOrMore>
          <element name="CONT">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">60</param>
            </data>
          </element>
        </zeroOrMore>
        <optional>
          <element name="ADR1">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">60</param>
            </data>
          </element>
        </optional>
        <optional>
          <element name="ADR2">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">60</param>
            </data>
          </element>
        </optional>
        <optional>
          <element name="CITY">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">60</param>
            </data>
          </element>
        </optional>
        <optional>
          <element name="STAE">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">60</param>
            </data>
          </element>
        </optional>
        <optional>
          <element name="POST">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">10</param>
            </data>
          </element>
        </optional>
        <optional>
          <element name="CTRY">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">60</param>
            </data>
          </element>
        </optional>
      </interleave>
    </element>
    <!-- end ADDR -->
 	<!-- separate the PHON tags from the ADDR structure, because its at the same
 	 level as the ADDR (i.e., not as its child)  and can hence occur anywhere at the same
 	 level -->
  </define>
  <!--CHANGE_DATE-->
  <define name="change_date">
    <element name="CHAN">
      <interleave>
        <element name="DATE">
          <!-- DATE Schematron rule -->
          <sch:pattern name="Checking length of Change Date DATE">
            <sch:rule context="CHAN/DATE/node()[self::text()]">
              <sch:assert test="string-length( normalize-space(.) ) &lt; 12">
              DATE range exceeds maximum of 11</sch:assert>
              <sch:assert test="string-length( normalize-space(.) ) &gt; 9">
              DATE range fails to meet the minimum of 10</sch:assert>
            </sch:rule>
          </sch:pattern>
          <mixed>
            <optional>
              <element name="TIME">
                  <data type="token">
                    <param name="pattern">([1-2]?\d)?:?([0-5]\d)?:?([0-5]\d)?:?(\d\d)?</param>
                    <param name="minLength">1</param>
                    <param name="maxLength">12</param>
 						</data>
              </element>
            </optional>
          </mixed>
        </element>
        <!--NOTE-->
        <zeroOrMore>
          <ref name="note_structure"/>
        </zeroOrMore>
      </interleave>
    </element>
  </define>
  <!--EVENT_DETAIL-->
  <define name="event_detail">
    <interleave>
      <!--TYPE-->
      <optional>
        <element name="TYPE">
          <data type="string">
            <param name="minLength">1</param>
            <param name="maxLength">90</param>
          </data>
        </element>
      </optional>
      <!--DATE-->
      <optional>
        <element name="DATE">
          <data type="string">
            <param name="minLength">1</param>
            <param name="maxLength">35</param>
          </data>
        </element>
      </optional>
      <!--PLAC-->
      <optional>
        <element name="PLAC">
          <!-- PLAC Schematron rule -->
          <sch:pattern name="Checking length of Event Detail Structure PLAC">
            <sch:rule context="PLAC/node()[self::text()]">
              <sch:assert test="string-length( normalize-space(.) ) &lt; 121">
              PLAC range exceeds maximum of 121</sch:assert>
            </sch:rule>
          </sch:pattern>
          <interleave>
            <text/>
            <!--FORM-->
            <optional>
              <element name="FORM">
                <data type="string">
                  <param name="minLength">1</param>
                  <param name="maxLength">120</param>
                </data>
              </element>
            </optional>
            <!--SOUR-->
            <zeroOrMore>
               <ref name="source_citation_obje"/>
            </zeroOrMore>
            <!--NOTE-->
            <zeroOrMore>
              <ref name="note_structure"/>
            </zeroOrMore>
          </interleave>
        </element>
      </optional>
      <!--ADDR -->
      <optional>
        <ref name="address_structure"/>
      </optional>
      <optional>
      	<ref name="phone"/>
      </optional>
      <!--AGE-->
      <optional>
        <ref name="age"/>
      </optional>
      <!--AGNC-->
      <optional>
        <element name="AGNC">
          <data type="string">
            <param name="minLength">1</param>
            <param name="maxLength">120</param>
          </data>
        </element>
      </optional>
      <!--CAUS-->
      <optional>
        <element name="CAUS">
          <data type="string">
            <param name="minLength">1</param>
            <param name="maxLength">90</param>
          </data>
        </element>
      </optional>
      <!--SOUR-->
      <zeroOrMore>
        <ref name="source_citation"/>
      </zeroOrMore>
      <!--OBJE-->
      <zeroOrMore>
        <ref name="multimedia_link"/>
      </zeroOrMore>
      <!--NOTE-->
      <zeroOrMore>
        <ref name="note_structure"/>
      </zeroOrMore>
    </interleave>
  </define>
  <!--FAMILY_EVENT_STRUCTURE-->
  <define name="family_event">
    <choice>
      <element name="ANUL">
        <!-- Used interleave instead of mixed for family events because of the HUSB
                                and WIFE elements; mixed seems to require them to be in a certain order (against
                                spec) and interleave "leaves" them be in any order -->
        <interleave>
          <text/>
          <optional>
            <ref name="event_detail"/>
          </optional>
          <optional>
            <element name="HUSB">
              <ref name="age"/>
            </element>
          </optional>
          <optional>
            <element name="WIFE">
              <ref name="age"/>
            </element>
          </optional>
        </interleave>
      </element>
      <element name="CENS">
        <interleave>
          <text/>
          <optional>
            <ref name="event_detail"/>
          </optional>
          <optional>
            <element name="HUSB">
              <ref name="age"/>
            </element>
          </optional>
          <optional>
            <element name="WIFE">
              <ref name="age"/>
            </element>
          </optional>
        </interleave>
      </element>
      <element name="DIV">
        <interleave>
          <text/>
          <optional>
            <ref name="event_detail"/>
          </optional>
          <optional>
            <element name="HUSB">
              <ref name="age"/>
            </element>
          </optional>
          <optional>
            <element name="WIFE">
              <ref name="age"/>
            </element>
          </optional>
        </interleave>
      </element>
      <element name="DIVF">
        <interleave>
          <text/>
          <optional>
            <ref name="event_detail"/>
          </optional>
          <optional>
            <element name="HUSB">
              <ref name="age"/>
            </element>
          </optional>
          <optional>
            <element name="WIFE">
              <ref name="age"/>
            </element>
          </optional>
        </interleave>
      </element>
      <element name="ENGA">
        <interleave>
          <text/>
          <optional>
            <ref name="event_detail"/>
          </optional>
          <optional>
            <element name="HUSB">
              <ref name="age"/>
            </element>
          </optional>
          <optional>
            <element name="WIFE">
              <ref name="age"/>
            </element>
          </optional>
        </interleave>
      </element>
      <element name="MARR">
        <interleave>
          <text/>
          <optional>
            <ref name="event_detail"/>
          </optional>
          <optional>
            <element name="HUSB">
              <ref name="age"/>
            </element>
          </optional>
          <optional>
            <element name="WIFE">
              <ref name="age"/>
            </element>
          </optional>
        </interleave>
      </element>
      <element name="MARB">
        <interleave>
          <text/>
          <optional>
            <ref name="event_detail"/>
          </optional>
          <optional>
            <element name="HUSB">
              <ref name="age"/>
            </element>
          </optional>
          <optional>
            <element name="WIFE">
              <ref name="age"/>
            </element>
          </optional>
        </interleave>
      </element>
      <element name="MARC">
        <interleave>
          <text/>
          <optional>
            <ref name="event_detail"/>
          </optional>
          <optional>
            <element name="HUSB">
              <ref name="age"/>
            </element>
          </optional>
          <optional>
            <element name="WIFE">
              <ref name="age"/>
            </element>
          </optional>
        </interleave>
      </element>
      <element name="MARL">
        <interleave>
          <text/>
          <optional>
            <ref name="event_detail"/>
          </optional>
          <optional>
            <element name="HUSB">
              <ref name="age"/>
            </element>
          </optional>
          <optional>
            <element name="WIFE">
              <ref name="age"/>
            </element>
          </optional>
        </interleave>
      </element>
      <element name="MARS">
        <interleave>
          <text/>
          <optional>
            <ref name="event_detail"/>
          </optional>
          <optional>
            <element name="HUSB">
              <ref name="age"/>
            </element>
          </optional>
          <optional>
            <element name="WIFE">
              <ref name="age"/>
            </element>
          </optional>
        </interleave>
      </element>
      <element name="EVEN">
        <interleave>
          <text/>
          <optional>
            <ref name="event_detail"/>
          </optional>
          <optional>
            <element name="HUSB">
              <ref name="age"/>
            </element>
          </optional>
          <optional>
            <element name="WIFE">
              <ref name="age"/>
            </element>
          </optional>
        </interleave>
      </element>
    </choice>
  </define>
  <!--INDIVIDUAL_ATTRIBUTE_STRUCTURE-->
  <define name="individual_attribute">
    <choice>
      <element name="CAST">
        <!-- CAST Schematron rule -->
        <sch:pattern name="Checking length of Individual Attribute Structure CAST">
          <sch:rule context="CAST/node()[self::text()]">
            <sch:assert test="string-length( normalize-space(.) ) &lt; 91">
            Exceeds maximum CAST length of 90</sch:assert>
          </sch:rule>
        </sch:pattern>
        <mixed>
          <optional>
            <ref name="event_detail"/>
          </optional>
        </mixed>
      </element>
      <element name="DSCR">
        <!-- DSCR Schematron rule -->
        <sch:pattern name="Checking length of Individual Attribute Structure DSCR">
          <sch:rule context="DSCR/node()[self::text()]">
            <sch:assert test="string-length( normalize-space(.) ) &lt; 249">
            Exceeds maximum DSCR length of 248</sch:assert>
          </sch:rule>
        </sch:pattern>
        <mixed>
          <optional>
            <ref name="event_detail"/>
          </optional>
        </mixed>
      </element>
      <element name="EDUC">
        <!-- EDUC Schematron rule -->
        <sch:pattern name="Checking length of Individual Attribute Structure EDUC">
          <sch:rule context="EDUC/node()[self::text()]">
            <sch:assert test="string-length( normalize-space(.) ) &lt; 249">
            Exceeds maximum EDUC length of 248</sch:assert>
          </sch:rule>
        </sch:pattern>
        <mixed>
          <optional>
            <ref name="event_detail"/>
          </optional>
        </mixed>
      </element>
      <element name="IDNO">
        <!-- INDO Schematron rule -->
        <sch:pattern name="Checking length of Individual Attribute Structure INDO">
          <sch:rule context="INDO/node()[self::text()]">
            <sch:assert test="string-length( normalize-space(.) ) &lt; 31">
            Exceeds maximum INDO length of 30</sch:assert>
          </sch:rule>
        </sch:pattern>
        <mixed>
          <optional>
            <ref name="event_detail"/>
          </optional>
        </mixed>
      </element>
      <element name="NATI">
        <!-- NATI Schematron rule -->
        <sch:pattern name="Checking length of Individual Attribute Structure NATI">
          <sch:rule context="NATI/node()[self::text()]">
            <sch:assert test="string-length( normalize-space(.) ) &lt; 121">
            Exceeds maximum NATI length of 120</sch:assert>
          </sch:rule>
        </sch:pattern>
        <mixed>
          <optional>
            <ref name="event_detail"/>
          </optional>
        </mixed>
      </element>
      <element name="NCHI">
        <!-- NCHI Schematron rule -->
        <sch:pattern name="Checking length of Individual Attribute Structure NCHI">
          <sch:rule context="NCHI/node()[self::text()]">
            <sch:assert test="string-length( normalize-space(.) ) &lt; 4">
            Exceeds maximum NCHI length of 3</sch:assert>
          </sch:rule>
        </sch:pattern>
        <mixed>
          <optional>
            <ref name="event_detail"/>
          </optional>
        </mixed>
      </element>
      <element name="NMR">
        <!-- NMR Schematron rule -->
        <sch:pattern name="Checking length of Individual Attribute Structure NMR">
          <sch:rule context="NMR/node()[self::text()]">
            <sch:assert test="string-length( normalize-space(.) ) &lt; 4">
            Exceeds maximum NMR length of 3</sch:assert>
          </sch:rule>
        </sch:pattern>
        <mixed>
          <optional>
            <ref name="event_detail"/>
          </optional>
        </mixed>
      </element>
      <element name="OCCU">
        <!-- OCCU Schematron rule -->
        <sch:pattern name="Checking length of Individual Attribute Structure OCCU">
          <sch:rule context="OCCU/node()[self::text()]">
            <sch:assert test="string-length( normalize-space(.) ) &lt; 91">
            Exceeds maximum OCCU length of 90</sch:assert>
          </sch:rule>
        </sch:pattern>
        <mixed>
          <optional>
            <ref name="event_detail"/>
          </optional>
        </mixed>
      </element>
      <element name="PROP">
        <!-- PROP Schematron rule -->
        <sch:pattern name="Checking length of Individual Attribute Structure PROP">
          <sch:rule context="PROP/node()[self::text()]">
            <sch:assert test="string-length( normalize-space(.) ) &lt; 249">
            Exceeds maximum PROP length of 248</sch:assert>
          </sch:rule>
        </sch:pattern>
        <mixed>
          <optional>
            <ref name="event_detail"/>
          </optional>
        </mixed>
      </element>
      <element name="RELI">
        <!-- RELI Schematron rule -->
        <sch:pattern name="Checking length of Individual Attribute Structure RELI">
          <sch:rule context="RELI/node()[self::text()]">
            <sch:assert test="string-length( normalize-space(.) ) &lt; 91">
            Exceeds maximum RELI length of 90</sch:assert>
          </sch:rule>
        </sch:pattern>
        <mixed>
          <optional>
            <ref name="event_detail"/>
          </optional>
        </mixed>
      </element>
      <element name="RESI">
        <optional>
          <ref name="event_detail"/>
        </optional>
      </element>
      <element name="SSN">
        <!-- SSN Schematron rule -->
        <sch:pattern name="Checking length of Individual Attribute Structure SSN">
          <sch:rule context="SSN/node()[self::text()]">
            <sch:assert test="string-length( normalize-space(.) ) &lt; 12">
            Exceeds maximum SSN length of 11</sch:assert>
          </sch:rule>
          <sch:rule context="SSN/node()[self::text()]">
            <sch:assert test="string-length( normalize-space(.) ) &gt; 8">
            Fails maximum SSN length of 9</sch:assert>
          </sch:rule>
        </sch:pattern>
        <mixed>
          <optional>
            <ref name="event_detail"/>
          </optional>
        </mixed>
      </element>
      <element name="TITL">
        <!-- TITL Schematron rule -->
        <sch:pattern name="Checking length of Individual Attribute Structure TITL">
          <sch:rule context="INDI/TITL/node()[self::text()]">
            <sch:assert test="string-length( normalize-space(.) ) &lt; 121">
            Exceeds maximum NOTE length of 120</sch:assert>
          </sch:rule>
        </sch:pattern>
        <mixed>
          <optional>
            <ref name="event_detail"/>
          </optional>
        </mixed>
      </element>
    </choice>
  </define>
  <!--INDIVIDUAL_EVENT_STRUCTURE-->
  <define name="individual_event">
    <choice>
      <element name="BIRT">
        <interleave>
          <text/>
          <!--Event Detail-->
          <optional>
            <ref name="event_detail"/>
          </optional>
          <!--FAMC-->
          <optional>
            <element name="FAMC">
              <attribute name="REFN">
                <data type="string">
                  <param name="minLength">1</param>
                  <param name="maxLength">22</param>
                </data>
              </attribute>
            </element>
            <empty/>
          </optional>
        </interleave>
      </element>
      <element name="CHR">
        <interleave>
          <text/>
          <!--Event Detail-->
          <optional>
            <ref name="event_detail"/>
          </optional>
          <!--FAMC-->
          <optional>
            <element name="FAMC">
              <attribute name="REFN">
                <data type="string">
                  <param name="minLength">1</param>
                  <param name="maxLength">22</param>
                </data>
              </attribute>
              <empty/>
            </element>
          </optional>
        </interleave>
      </element>
      <element name="DEAT">
        <mixed>
          <optional>
            <ref name="event_detail"/>
          </optional>
        </mixed>
      </element>
      <element name="BURI">
        <mixed>
          <optional>
            <ref name="event_detail"/>
          </optional>
        </mixed>
      </element>
      <element name="CREM">
        <mixed>
          <optional>
            <ref name="event_detail"/>
          </optional>
        </mixed>
      </element>
      <element name="ADOP">
        <interleave>
          <text/>
          <!--Event Detail-->
          <optional>
            <ref name="event_detail"/>
          </optional>
          <!--FAMC-->
          <optional>
            <element name="FAMC">
              <attribute name="REFN">
                <data type="string">
                  <param name="minLength">1</param>
                  <param name="maxLength">22</param>
                </data>
              </attribute>
              <optional>
              <element name="ADOP">
                <data type="string">
                  <param name="pattern">HUSB|WIFE|BOTH</param>
                  <param name="minLength">1</param>
                  <param name="maxLength">4</param>
                </data>
              </element>
              </optional>
            </element>
          </optional>
        </interleave>
      </element>
      <element name="BAPM">
        <mixed>
          <optional>
            <ref name="event_detail"/>
          </optional>
        </mixed>
      </element>
      <element name="BARM">
        <mixed>
          <optional>
            <ref name="event_detail"/>
          </optional>
        </mixed>
      </element>
      <element name="BASM">
        <mixed>
          <optional>
            <ref name="event_detail"/>
          </optional>
        </mixed>
      </element>
      <element name="BLES">
        <mixed>
          <optional>
            <ref name="event_detail"/>
          </optional>
        </mixed>
      </element>
      <element name="CHRA">
        <mixed>
          <optional>
            <ref name="event_detail"/>
          </optional>
        </mixed>
      </element>
      <element name="CONF">
        <mixed>
          <optional>
            <ref name="event_detail"/>
          </optional>
        </mixed>
      </element>
      <element name="FCOM">
        <mixed>
          <optional>
            <ref name="event_detail"/>
          </optional>
        </mixed>
      </element>
      <element name="ORDN">
        <mixed>
          <optional>
            <ref name="event_detail"/>
          </optional>
        </mixed>
      </element>
      <element name="NATU">
        <mixed>
          <optional>
            <ref name="event_detail"/>
          </optional>
        </mixed>
      </element>
      <element name="EMIG">
        <mixed>
          <optional>
            <ref name="event_detail"/>
          </optional>
        </mixed>
      </element>
      <element name="IMMI">
        <mixed>
          <optional>
            <ref name="event_detail"/>
          </optional>
        </mixed>
      </element>
      <element name="CENS">
        <mixed>
          <optional>
            <ref name="event_detail"/>
          </optional>
        </mixed>
      </element>
      <element name="PROB">
        <mixed>
          <optional>
            <ref name="event_detail"/>
          </optional>
        </mixed>
      </element>
      <element name="WILL">
        <mixed>
          <optional>
            <ref name="event_detail"/>
          </optional>
        </mixed>
      </element>
      <element name="GRAD">
        <mixed>
          <optional>
            <ref name="event_detail"/>
          </optional>
        </mixed>
      </element>
      <element name="RETI">
        <mixed>
          <optional>
            <ref name="event_detail"/>
          </optional>
        </mixed>
      </element>
      <element name="EVEN">
        <mixed>
          <optional>
            <ref name="event_detail"/>
          </optional>
        </mixed>
      </element>
    </choice>
  </define>
  <!--LDS_INDIVIDUAL_ORDINANCE-->
  <define name="lds_individual_ordinance">
    <choice>
      <element name="BAPL">
        <interleave>
          <!--STAT-->
          <optional>
            <element name="STAT">
              <data type="string">
                <param name="pattern">
                CHILD|CLEARED|COMPLETED|INFANT|PRE-1970|QUALIFIED|STILLBORN|SUBMITTED|UNCLEARED</param>
                <param name="minLength">5</param>
                <param name="maxLength">10</param>
              </data>
            </element>
          </optional>
          <!--DATE-->
          <optional>
            <element name="DATE">
              <data type="string">
                <param name="minLength">4</param>
                <param name="maxLength">35</param>
              </data>
            </element>
          </optional>
          <!--TEMP-->
          <optional>
            <element name="TEMP">
              <data type="string">
                <param name="minLength">4</param>
                <param name="maxLength">5</param>
              </data>
            </element>
          </optional>
          <!--PLAC-->
          <optional>
            <element name="PLAC">
              <data type="string">
                <param name="minLength">1</param>
                <param name="maxLength">120</param>
              </data>
            </element>
          </optional>
          <!--SOUR-->
          <zeroOrMore>
            <ref name="source_citation"/>
          </zeroOrMore>
          <!--NOTE-->
          <zeroOrMore>
            <ref name="note_structure"/>
          </zeroOrMore>
        </interleave>
      </element>
      <element name="CONL">
        <interleave>
          <!--STAT-->
          <optional>
            <element name="STAT">
              <data type="string">
                <param name="pattern">
                CHILD|CLEARED|COMPLETED|INFANT|PRE-1970|QUALIFIED|STILLBORN|SUBMITTED|UNCLEARED</param>
                <param name="minLength">5</param>
                <param name="maxLength">10</param>
              </data>
            </element>
          </optional>
          <!--DATE-->
          <optional>
            <element name="DATE">
              <data type="string">
                <param name="minLength">4</param>
                <param name="maxLength">35</param>
              </data>
            </element>
          </optional>
          <!--TEMP-->
          <optional>
            <element name="TEMP">
              <data type="string">
                <param name="minLength">4</param>
                <param name="maxLength">5</param>
              </data>
            </element>
          </optional>
          <!--PLAC-->
          <optional>
            <element name="PLAC">
              <data type="string">
                <param name="minLength">1</param>
                <param name="maxLength">120</param>
              </data>
            </element>
          </optional>
          <!--SOUR-->
          <zeroOrMore>
            <ref name="source_citation"/>
          </zeroOrMore>
          <!--NOTE-->
          <zeroOrMore>
            <ref name="note_structure"/>
          </zeroOrMore>
        </interleave>
      </element>
      <element name="ENDL">
        <interleave>
          <!--STAT-->
          <optional>
            <element name="STAT">
              <data type="string">
                <param name="pattern">
                CHILD|CLEARED|COMPLETED|INFANT|PRE-1970|QUALIFIED|STILLBORN|SUBMITTED|UNCLEARED</param>
                <param name="minLength">5</param>
                <param name="maxLength">10</param>
              </data>
            </element>
          </optional>
          <!--DATE-->
          <optional>
            <element name="DATE">
              <data type="string">
                <param name="minLength">4</param>
                <param name="maxLength">35</param>
              </data>
            </element>
          </optional>
          <!--TEMP-->
          <optional>
            <element name="TEMP">
              <data type="string">
                <param name="minLength">4</param>
                <param name="maxLength">5</param>
              </data>
            </element>
          </optional>
          <!--PLAC-->
          <optional>
            <element name="PLAC">
              <data type="string">
                <param name="minLength">1</param>
                <param name="maxLength">120</param>
              </data>
            </element>
          </optional>
          <!--SOUR-->
          <zeroOrMore>
            <ref name="source_citation"/>
          </zeroOrMore>
          <!--NOTE-->
          <zeroOrMore>
            <ref name="note_structure"/>
          </zeroOrMore>
        </interleave>
      </element>
      <element name="SLGC">
        <interleave>
          <!--STAT-->
          <optional>
            <element name="STAT">
              <data type="string">
                <param name="pattern">
                BIC|CLEARED|COMPLETED|DNS|PRE-1970|QUALIFIED|STILLBORN|SUBMITTED|UNCLEARED</param>
                <param name="minLength">5</param>
                <param name="maxLength">10</param>
              </data>
            </element>
          </optional>
          <!--DATE-->
          <optional>
            <element name="DATE">
              <data type="string">
                <param name="minLength">4</param>
                <param name="maxLength">35</param>
              </data>
            </element>
          </optional>
          <!--TEMP-->
          <optional>
            <element name="TEMP">
              <data type="string">
                <param name="minLength">4</param>
                <param name="maxLength">5</param>
              </data>
            </element>
          </optional>
          <!--PLAC-->
          <optional>
            <element name="PLAC">
              <data type="string">
                <param name="minLength">1</param>
                <param name="maxLength">120</param>
              </data>
            </element>
          </optional>
          <!--FAMC-->
          <element name="FAMC">
            <attribute name="REFN">
              <data type="string">
                <param name="minLength">1</param>
                <param name="maxLength">22</param>
              </data>
            </attribute>
            <empty/>
          </element>
          <!--SOUR-->
          <zeroOrMore>
            <ref name="source_citation"/>
          </zeroOrMore>
          <!--NOTE-->
          <zeroOrMore>
            <ref name="note_structure"/>
          </zeroOrMore>
        </interleave>
      </element>
    </choice>
  </define>
  <!--MULTIMEDIA_LINK-->
  <define name="multimedia_link">
    <choice>
      <ref name="multimedia_link_ref"/>
      <ref name="multimedia_link_simple"/>
    </choice>
  </define>
  <define name="multimedia_link_ref">
    <element name="OBJE">
      <attribute name="REFN">
        <data type="string">
          <param name="minLength">1</param>
          <param name="maxLength">22</param>
        </data>
      </attribute>
      <empty/>
    </element>
  </define>
  <define name="multimedia_link_simple">
    <element name="OBJE">
      <interleave>
        <element name="FORM">
          <data type="string">
            <param name="pattern">bmp|gif|jpeg|ole|pcx|tiff|wav</param>
            <param name="minLength">3</param>
            <param name="maxLength">4</param>
          </data>
        </element>
        <!--TITL-->
        <optional>
          <element name="TITL">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">248</param>
            </data>
          </element>
        </optional>
        <!--FILE-->
        <optional>
          <element name="FILE">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">30</param>
            </data>
          </element>
        </optional>
        <!--NOTE-->
        <zeroOrMore>
          <ref name="note_structure"/>
        </zeroOrMore>
      </interleave>
    </element>
  </define>
  <!--NOTE_STRUCTURE-->
  <define name="note_structure">
    <choice>
      <ref name="note_structure_ref"/>
      <ref name="note_structure_simple"/>
    </choice>
  </define>
  <define name="note_structure_ref">
    <element name="NOTE">
      <attribute name="REFN">
        <data type="string">
          <param name="minLength">1</param>
          <param name="maxLength">22</param>
        </data>
      </attribute>
      <!--SOUR-->
      <zeroOrMore>
        <element name="SOUR">
          <attribute name="REFN">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">22</param>
            </data>
          </attribute>
          <empty/>
        </element>
      </zeroOrMore>
    </element>
  </define>
  <define name="note_structure_simple">
    <element name="NOTE">
      <!-- NOTE Schematron rule -->
      <sch:pattern name="Checking length of Note Structure NOTE">
        <sch:rule context="NOTE/node()[self::text()]">
          <sch:assert test="string-length( normalize-space(.) ) &lt; 249">
          NOTE range exceeds maximum of 248</sch:assert>
        </sch:rule>
      </sch:pattern>
      <interleave>
        <text/>
        <!--CONC-->
        <zeroOrMore>
          <element name="CONC">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">248</param>
            </data>
          </element>
        </zeroOrMore>
        <!--CONT-->
        <zeroOrMore>
          <element name="CONT">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">248</param>
            </data>
          </element>
        </zeroOrMore>
        <!--SOUR-->
        <zeroOrMore>
          <element name="SOUR">
            <attribute name="REFN">
              <data type="string">
                <param name="minLength">1</param>
                <param name="maxLength">22</param>
              </data>
            </attribute>
            <empty/>
          </element>
        </zeroOrMore>
      </interleave>
    </element>
  </define>
  <!--SOURCE_CITATION-->
  <define name="source_citation">
    <choice>
      <ref name="source_citation_ref"/>
      <ref name="source_citation_simple"/>
    </choice>
  </define>
  <!-- to prevent annoying interleave ovelap -->
  <define name="source_citation_obje">
    <choice>
      <ref name="source_citation_ref"/>
      <ref name="source_citation_simple_obje"/>
    </choice>
  </define>

  <define name="source_citation_ref">
    <element name="SOUR">
      <attribute name="REFN">
        <data type="string">
          <param name="minLength">1</param>
          <param name="maxLength">22</param>
        </data>
      </attribute>
      <interleave>
        <!--PAGE-->
        <optional>
          <element name="PAGE">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">248</param>
            </data>
          </element>
        </optional>
        <!--EVEN-->
        <optional>
          <element name="EVEN">
            <!-- EVEN Schematron rule -->
            <sch:pattern name="Checking length of Source Citation EVEN">
              <sch:rule context="EVEN/node()[self::text()]">
                <sch:assert test="string-length( normalize-space(.) ) &lt; 16">
                EVEN range exceeds maximum of 15</sch:assert>
              </sch:rule>
            </sch:pattern>
            <mixed>
              <optional>
                <element name="ROLE">
                  <!--TODO Implement Pattern-->
                  <data type="string">
                    <param name="minLength">1</param>
                    <param name="maxLength">15</param>
                  </data>
                </element>
              </optional>
            </mixed>
          </element>
        </optional>
        <!--DATA-->
        <optional>
          <element name="DATA">
            <interleave>
              <optional>
                <element name="DATE">
                  <data type="string">
                    <param name="minLength">1</param>
                    <param name="maxLength">90</param>
                  </data>
                </element>
              </optional>
              <zeroOrMore>
                <element name="TEXT">
                  <!-- DATE Schematron rule -->
                  <sch:pattern name="Checking length of Source Citation TEXT">
                    <sch:rule context="TEXT/node()[self::text()]">
                      <sch:assert test="string-length( normalize-space(.) ) &lt; 249">
                      TEXT range exceeds maximum of 248</sch:assert>
                    </sch:rule>
                  </sch:pattern>
                  <interleave>
                    <text/>
                    <zeroOrMore>
                      <element name="CONC">
                        <data type="string">
                          <param name="minLength">1</param>
                          <param name="maxLength">248</param>
                        </data>
                      </element>
                    </zeroOrMore>
                    <zeroOrMore>
                      <element name="CONT">
                        <data type="string">
                          <param name="minLength">1</param>
                          <param name="maxLength">248</param>
                        </data>
                      </element>
                    </zeroOrMore>
                  </interleave>
                </element>
              </zeroOrMore>
            </interleave>
          </element>
        </optional>
        <!--QUAY-->
        <optional>
          <element name="QUAY">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">1</param>
              <param name="pattern">0|1|2|3</param>
            </data>
          </element>
        </optional>
        <!--OBJE-->
        <zeroOrMore>
          <ref name="multimedia_link"/>
        </zeroOrMore>
        <!--NOTE-->
        <zeroOrMore>
          <ref name="note_structure"/>
        </zeroOrMore>
      </interleave>
    </element>
  </define>
  <define name="source_citation_simple">
    <element name="SOUR">
      <!-- SOUR Schematron rule -->
      <sch:pattern name="Checking length of Source Citaton (simple) SOUR">
        <sch:rule context="SOUR/node()[self::text()]">
          <sch:assert test="string-length( normalize-space(.) ) &lt; 249">
          SOUR range exceeds maximum of 248</sch:assert>
        </sch:rule>
      </sch:pattern>
      <interleave>
        <text/>
        <!--CONC-->
        <zeroOrMore>
          <element name="CONC">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">248</param>
            </data>
          </element>
        </zeroOrMore>
        <!--CONT-->
        <zeroOrMore>
          <element name="CONT">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">248</param>
            </data>
          </element>
        </zeroOrMore>
        <!--TEXT FIX -->
        <zeroOrMore>
          <element name="TEXT">
            <!-- TEXT Schematron rule -->
            <sch:pattern name="Checking length of Source Citation (simple) TEXT">
              <sch:rule context="TEXT/node()[self::text()]">
                <sch:assert test="string-length( normalize-space(.) ) &lt; 249">
                TEXT range exceeds maximum of 248</sch:assert>
              </sch:rule>
            </sch:pattern>
            <interleave>
              <text/>
              <zeroOrMore>
                <element name="CONC">
                  <data type="string">
                    <param name="minLength">1</param>
                    <param name="maxLength">248</param>
                  </data>
                </element>
              </zeroOrMore>
              <zeroOrMore>
                <element name="CONT">
                  <data type="string">
                    <param name="minLength">1</param>
                    <param name="maxLength">248</param>
                  </data>
                </element>
              </zeroOrMore>
            </interleave>
          </element>
        </zeroOrMore>
        <!--NOTE-->
        <zeroOrMore>
          <ref name="note_structure"/>
        </zeroOrMore>
      </interleave>
    </element>
  </define>
<!-- This is a strange necessity caused by the following GEDCOM structures 
  n  NAME <NAME_PERSONAL>  {1:1}
    +1 NPFX <NAME_PIECE_PREFIX>  {0:1}
    +1 GIVN <NAME_PIECE_GIVEN>  {0:1}
    +1 NICK <NAME_PIECE_NICKNAME>  {0:1}
    +1 SPFX <NAME_PIECE_SURNAME_PREFIX>  {0:1}
    +1 SURN <NAME_PIECE_SURNAME>  {0:1}
    +1 NSFX <NAME_PIECE_SUFFIX>  {0:1}
    +1 <<SOURCE_CITATION>>  {0:M}
      +2 <<NOTE_STRUCTURE>>  {0:M}
      +2 <<MULTIMEDIA_LINK>>  {0:M}
    +1 <<NOTE_STRUCTURE>>  {0:M}
    
    The problem here is the +2 level MULTIMEDIA_LINK under the SOUR.  A simple
    SOUR citation (one without a ref attribute) normally does not have a multimedia
    OBJE under it. Unlike a source_citation_ref tag that does.  Hence, the zeroOrMore
    OBJE tags needed to be added to places where source_citation are called with the
    +2 level OBJE tags.
    
    This occurs in three structures: the Personal Name Structure (above), the Event Detail
    Structure, and the Family record
-->
  <define name="source_citation_simple_obje">
    <element name="SOUR">
      <!-- SOUR Schematron rule -->
      <sch:pattern name="Checking length of Source Citation (simple) SOUR">
        <sch:rule context="SOUR/node()[self::text()]">
          <sch:assert test="string-length( normalize-space(.) ) &lt; 249">
          SOUR range exceeds maximum of 248</sch:assert>
        </sch:rule>
      </sch:pattern>
      <interleave>
        <text/>
        <!--CONC-->
        <zeroOrMore>
          <element name="CONC">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">248</param>
            </data>
          </element>
        </zeroOrMore>
        <!--CONT-->
        <zeroOrMore>
          <element name="CONT">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">248</param>
            </data>
          </element>
        </zeroOrMore>
        <!--TEXT FIX -->
        <zeroOrMore>
          <element name="TEXT">
            <!-- TEXT Schematron rule -->
            <sch:pattern name="Checking length of Source Citation (simple) TEXT">
              <sch:rule context="TEXT/node()[self::text()]">
                <sch:assert test="string-length( normalize-space(.) ) &lt; 249">
                TEXT range exceeds maximum of 248</sch:assert>
              </sch:rule>
            </sch:pattern>
            <interleave>
              <text/>
              <zeroOrMore>
                <element name="CONC">
                  <data type="string">
                    <param name="minLength">1</param>
                    <param name="maxLength">248</param>
                  </data>
                </element>
              </zeroOrMore>
              <zeroOrMore>
                <element name="CONT">
                  <data type="string">
                    <param name="minLength">1</param>
                    <param name="maxLength">248</param>
                  </data>
                </element>
              </zeroOrMore>
            </interleave>
          </element>
        </zeroOrMore>
        <!--NOTE-->
        <zeroOrMore>
          <ref name="note_structure"/>
        </zeroOrMore>
        <zeroOrMore>
          <ref name="multimedia_link"/>
        </zeroOrMore>
      </interleave>
    </element>
  </define>
  <!--Miscellaneous-->
  <!--AGE_AT_EVENT-->
  <define name="age">
    <element name="AGE">
      <data type="string">
      	<!-- FIX this pattern chokes on the greater/less than signs -
      			 It chockes of I209 as well-->
        <param name="pattern">&lt;?&gt;?( ?\d?\dy)?( ?\d?\dm)?( ?\d?\dd)?|CHILD|INFANT|STILLBORN</param>
        <param name="minLength">1</param>
        <param name="maxLength">12</param>
      </data>
    </element>
  </define>
<!--PHON -->
<define name="phone">
    <!--PHON-->
    <optional>
      <element name="PHON">
        <data type="string">
          <param name="minLength">1</param>
          <param name="maxLength">25</param>
        </data>
      </element>
    </optional>
    <!--PHON-->
    <optional>
      <element name="PHON">
        <data type="string">
          <param name="minLength">1</param>
          <param name="maxLength">25</param>
        </data>
      </element>
    </optional>
    <!--PHON-->
    <optional>
      <element name="PHON">
        <data type="string">
          <param name="minLength">1</param>
          <param name="maxLength">25</param>
        </data>
      </element>
    </optional>
</define>
  <!--USER_REFERENCE_NUMBER-->
  <define name="user_reference_number">
    <element name="REFN">
      <!-- REFN Schematron rule -->
      <sch:pattern name="Checking length of User_Reference_Number">
        <sch:rule context="REFN/node()[self::text()]">
          <sch:assert test="string-length( normalize-space(.) ) &lt; 21">
          REFN exceeds maximum of 20</sch:assert>
        </sch:rule>
      </sch:pattern>
      <mixed>
        <optional>
          <element name="TYPE">
            <data type="string">
              <param name="minLength">1</param>
              <param name="maxLength">40</param>
            </data>
          </element>
        </optional>
      </mixed>
    </element>
  </define>
  <!--record end-->
  <define name="record_end">
    <!--REFN-->
    <zeroOrMore>
      <ref name="user_reference_number"/>
    </zeroOrMore>
    <!--RIN-->
    <optional>
      <element name="RIN">
        <data type="string">
          <param name="minLength">1</param>
          <param name="maxLength">12</param>
        </data>
      </element>
    </optional>
    <!--CHAN-->
    <optional>
      <ref name="change_date"/>
    </optional>
  </define>
</grammar>
